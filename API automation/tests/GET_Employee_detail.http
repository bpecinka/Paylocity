
//GET employee detail for valid employee
GET {{baseUrl}}/Employees/{{GETClientDetailRequest.ValidClientId}} HTTP/1.1
Content-Type: {{Content-Type}}
Authorization: {{Authorization}}

> {%
    let jsonData = response.body
    let expectedValidEmployeeID = '1b07f7cf-7738-4cad-9ea2-5c0fd058c225' //aqua unfortunately doesn't allow for external vars usage inside tests :(

    client.test("Request returns HTTP 200 ", function() {
        client.assert(response.status === 200, "Expected HTTP status 200 but got '" + response.status)
    });

    client.test("Response is not empty", function (){
        client.assert(Object.keys(response.body).length >0, "Response body is not empty");
    });

    client.test("Response includes correct data", function () { //could be checked against api specification (OpenAPI)
            client.assert(typeof jsonData.username === 'string' && true  && jsonData.username !== '')
            client.assert(jsonData.id === expectedValidEmployeeID , "Expected 'id' to equal requested employee ID" );
            client.assert(typeof jsonData.firstName === 'string' && true )
            client.assert(typeof jsonData.lastName === 'string' && true )
            client.assert(typeof jsonData.salary === 'number' && !isNaN(jsonData.salary), "The 'salary' should be a valid number");
            client.assert(typeof jsonData.gross === 'number' && !isNaN(jsonData.gross), "The 'gross' should be a valid number");
            client.assert(typeof jsonData.benefitsCost === 'number' && !isNaN(jsonData.benefitsCost), "The 'benefitsCost' should be a valid number");
            client.assert(typeof jsonData.net === 'number' && !isNaN(jsonData.net), "The 'net' should be a valid number");
        }
    )



%}
###

//GET employee detail for anonymous
GET {{baseUrl}}/Employees/{{GETClientDetailRequest.ValidClientId}} HTTP/1.1
Content-Type: {{Content-Type}}


> {%

    let jsonData = response.body

    client.test("Request returns HTTP 401 without valid authorization", function() {
        client.assert(response.status === 401, "Expected HTTP status 401 but got '" + response.status)
    });

    client.test("Response is not empty", function (){
        client.assert(Object.keys(response.body).length >0, "Response body is not empty");
    });

    client.test("Response includes correct title - Unauthorized", function () {
            client.assert(jsonData.title === 'Unauthorized', "Expected 'title' to be 'Unauthorized' but got '" + response.title + "'");
        }
    )
%}
###