
//GET employee list for logged in user
GET {{baseUrl}}/Employees HTTP/1.1
Authorization: {{Authorization}}
Content-Type: {{Content-Type}}

> {%

    let jsonData = response.body

    client.test("Request returns HTTP 200", function() {
        client.assert(response.status === 200)
    });

    client.test("Response is an Array and is not empty", function (){
        client.assert(Array.isArray(jsonData) && jsonData.length > 0, "Response is an Array and is not empty");
    });

    client.test("Each object contains key 'ID' and it is non-empty string or null", function (){
        for (let i = 0; i < jsonData.length; i++) {
            let item = jsonData[i];
            client.assert(item.hasOwnProperty('id'), `Object at index ${i} does not have the 'id' key`);
            client.assert(typeof item.id === 'string' , `The 'id' in object at index ${i} is not a string`);
            client.assert(typeof item.id !== 'undefined' && item.id !== null , `The 'id' in object at index ${i} is null`);

        }
    })

%}
###

//GET employee list for anonymous user
GET {{baseUrl}}/Employees HTTP/1.1
Content-Type: {{Content-Type}}

> {%

    let jsonData = response.body

    client.test("Request returns HTTP 401 without valid authorization", function() {
        client.assert(response.status === 401, "Expected HTTP status 401 but got '" + response.status)
    });

    client.test("Response is not empty", function (){
        client.assert(Object.keys(response.body).length >0, "Response body is not empty");
    });

    client.test("Response includes correct title - Unauthorized", function () {
            client.assert(jsonData.title === 'Unauthorized', "Expected 'title' to be 'Unauthorized' but got '" + response.title + "'");
        }
    )
%}
###